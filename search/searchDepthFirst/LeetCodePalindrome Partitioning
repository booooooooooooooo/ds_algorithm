/**
TODO: DP solition.
*/

public class Solution {
    public List<List<String>> partition(String s) {
      //exclude boundary cases
      if(s == null) return null;
      if(s.length() == 0) return new ArrayList<List<String>>();

      List<List<String>> result = new ArrayList<List<String>>();
      dfs(s, 0, 0, new ArrayList<String>(), result);
      return result;
    }

    public void dfs(String s, int start, int end, ArrayList<String> arrList, List<List<String>> result){
      //base case
      if( start == s.length() && end == s.length() ) result.add((ArrayList<String>) arrList.clone());

      //keep searching on branches where there may be possible solution
      if(end <= s.length() ){
        if(isPalindrome(s, start, end)){
          arrList.add(s.substring(start, end));
          dfs(s, end, end, arrList, result);
          arrList.remove(arrList.size() - 1);
        }
        dfs(s, start, end + 1, arrList, result);
      }
    }

    public boolean isPalindrome(String s, int start, int end){
      //empty substring is not palindorme
      if(start >= end) return false;
      //process not empty substring
      end--;
      while(start < end){
        if(s.charAt(start) != s.charAt(end)) return false;
        start++;
        end--;
      }
      return true;
    }
}
