public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<List<String>>();
        boolean[] used = new boolean[n];
        Arrays.fill(used, false);
        dfs(n, used, new ArrayList<Integer>(), result);
        //return result
        return result;
    }

    public void dfs(int n, boolean[] used, List<Integer> permutation, List<List<String>> result){
      if(permutation.size() == n) update(permutation, result);
      for(int i = 0; i < n; i++){
        if(!used[i]){
          permutation.add(i);
          used[i] = true;
          dfs(n, used, permutation, result);
          permutation.remove(permutation.size() - 1);
          used[i] = false;
        }
      }
    }

    //check and add valid solution to result.
    public void update(List<Integer> permutation, List<List<String>> result){
      if(isSafeDiagonal(permutation)){
        result.add(permutationToSolution(permutation));
      }
    }

    //permutations guarantees no horizonal and vertical attack. isSafeDiagonal guarantees no diagonal attack.
    public boolean isSafeDiagonal(List<Integer> permutation){
      for(int i = 0; i < permutation.size(); i++){
        for(int j = i + 1; j < permutation.size(); j++){
          if( Math.abs( permutation.get(j) - permutation.get(i) ) == (j - i) ) return false;
        }
      }
      return true;
    }
    //convert permutation list to solution string
    public List<String> permutationToSolution(List<Integer> permutation){
      int n = permutation.size();
      char[][] panel = new char[n][n];
      for(int i = 0; i < n; i++){
        Arrays.fill(panel[i], '.');
        int j = permutation.get(i);
        panel[i][j] = 'Q';
      }
      List<String> solution = new ArrayList<String>();
      for(int i = 0; i < n; i++){
        solution.add( new String(panel[i]) );
      }
      return solution;
    }
}
