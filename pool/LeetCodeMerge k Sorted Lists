/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
      //exclude null and empty case
      if(lists == null) return null;
      if(lists.length == 0) return null;

      //process normal case and return result
      return solve(lists, 0, lists.length);
    }

    public ListNode solve(ListNode[] lists, int start, int end){//[start, end)
      if(start == end - 1) return lists[start];
      else{
        ListNode h1 = solve(lists, start, start + (end - start) / 2 );
        ListNode h2 = solve(lists, start + (end - start) / 2, end);
        return merge2Lists(h1, h2);
      }
    }

    public ListNode merge2Lists(ListNode h1, ListNode h2){//can handle null 
      ListNode dummyHead = new ListNode(0);
      ListNode f = dummyHead;
      ListNode t1 = h1;
      ListNode t2 = h2;
      while(t1 != null || t2 != null){
        if(t1 != null && t2 != null){
          if(t1.val < t2.val){
            f.next = t1;
            t1 = t1.next;
          }else{
            f.next = t2;
            t2 = t2.next;
          }
        }else if(t1 != null){
          f.next = t1;
          t1 = t1.next;
        }else{
          f.next = t2;
          t2 = t2.next;
        }
        f = f.next;
      }
      return dummyHead.next;
    }
}
