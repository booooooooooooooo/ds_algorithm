

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

/**
Recursive
*/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> result = new ArrayList<Integer>();
      solve(result, root);
      return result;
    }
    public void solve(List<Integer> result, TreeNode node){
      if(node == null) return;
      else{
        solve(result, node.left);
        result.add(node.val);
        solve(result, node.right);
      }
    }
}

/**
Iterative1
TODO: rethink
*/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> result = new ArrayList<Integer>();
      Stack<TreeNode> stack = new Stack<TreeNode>();
      TreeNode node = root;
      while( !stack.isEmpty() || node != null ){
        if(node != null){
          stack.push(node);
          node = node.left;
        }else{
          node = stack.pop();
          result.add(node.val);
          node = node.right;
        }
      }
      return result;
    }
}



/**
Iterative2
*/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> result = new ArrayList<Integer>();
      Stack<TreeNode> stack = new Stack<TreeNode>();
      Stack<Integer> indicator = new Stack<Integer>();
      stack.push(root);
      indicator.push(0);
      while( !stack.isEmpty() ){
        TreeNode node = stack.pop();
        int i = indicator.pop();
        if(node == null)
          continue;
        else if(i == 1)
          result.add(node.val);
        else{
          stack.push(node.right);
          indicator.push(0);
          stack.push(node);
          indicator.push(1);
          stack.push(node.left);
          indicator.push(0);
        }
      }
      return result;
    }
}
