public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
      List<List<Integer>> result = new ArrayList<List<Integer>> ();
      int[] freq = new int[candidates.length];
      Arrays.fill(freq, 0);
      dfs(candidates, freq, target, 0, result);
      return result;
    }

    public void dfs(int[] candidates, int[] freq, int rest, int index,  List<List<Integer>> result){
      if(rest == 0){
        result.add(toSolution(candidates, freq));
        return;////Caution: no return will cause duplicate
      }
      if(index == candidates.length) return;

      for(int i = 0; i <= rest / candidates[index]; i++){
        freq[index] = i;
        rest -= candidates[index] * i;
        dfs(candidates, freq, rest, index + 1, result);
        freq[index] = 0;
        rest += candidates[index] * i;
      }
    }

    public List<Integer> toSolution(int[] candidates, int[] freq){
      List<Integer> solution = new ArrayList<Integer>();
      for(int i = 0; i < freq.length; i++){
        for(int j = 0; j < freq[i]; j++){
          solution.add(candidates[i]);
        }
      }
      return solution;
    }


}
